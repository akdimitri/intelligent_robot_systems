-----CHALLENGE 1---------

    # Challenge 1     
    
    # Calculate Number of Measurements
    N_measurements = len(scan)
    
    # Initialize angles Vectors
    angles = [0 for i in range(N_measurements)]
    
    # Calculate Angles
    for x in range(N_measurements):
      angles[x] = math.radians(-135 + x*270/(N_measurements - 1))
    
    # Calculate Linear Speeds based on presentation 9
    for x in range(N_measurements):
      linear = linear -(math.cos(angles[x]) / scan[x]**2)
    
    # Calculate Angular Speeds based on presentation 9
    for x in range(N_measurements):
      angular = angular - (math.sin(angles[x]) / scan[x]**2)

    # Challenge 1    

    l_laser = l_laser + 100      # add sth constant to move
    a_laser = a_laser/300

    # The robot must have a maximum absolute linear speed of 0.3 m/s
    # and maximum absolute rotational speed 0.3 rad/sec.
    if abs(l_laser) > 0.3:  # Correction if absolute linear is greater than 0.3 m/s
        if l_laser > 0:
            self.linear_velocity = 0.3
        else:
            self.linear_velocity = -0.3
    else:
        self.linear_velocity = l_laser

    if abs(a_laser) > 0.3:   # Correction if absolute angular is greater than 0.3 rad/sec
        if a_laser > 0:
            self.angular_velocity = 0.3
        else:
            self.angular_velocity = -0.3
    else:
      self.angular_velocity = a_laser

---------CHALLENGE 2----------

ps.pose.position.x = p[0] * self.robot_perception.resolution + self.robot_perception.origin['x']
ps.pose.position.y = p[1] * self.robot_perception.resolution + self.robot_perception.origin['y']


----------CHALLENGE 3----------

    # Challenge 3      

if self.subtargets and self.next_subtarget <= len(self.subtargets) - 1:
    st_x = self.subtargets[self.next_subtarget][0]
    st_y = self.subtargets[self.next_subtarget][1]

    # We know goals position (x', y') and robot's position (x,y)
    # It is tan(Theta_RG) = (y'-y)/(x'-x) = lamda
    # Theta_RG = atan(lamda)
    # Theta_RG is the angle between vector RobotGoal and Ox axis
    Theta_RG = math.atan2(st_y - ry, st_x - rx)     # atan2 return the result in rads

    # We can calculate the angle between the direction of robot's movement
    # and the RG vector. The angle will be the difference of RGangle - theta(direction angle of robot's movement)
    D_Theta = Theta_RG - theta

    # Based on presentation 9, D_Theta
    # has to be readjusted in [-pi, pi]
    if (D_Theta < math.pi) and (D_Theta > -math.pi):
        omega = D_Theta / math.pi
    elif D_Theta >= math.pi:
        omega = (D_Theta - 2 * math.pi) / math.pi
    elif D_Theta <= -math.pi:
        omega = (D_Theta + 2 * math.pi) / math.pi

    # Linear Speed Calculation
    # presentation 9: u = umax(1- |omega|)^n
    # larger n -> lower speed
    # max speed = 0.3
    u = ((1 - abs(omega))**(6.00))
    linear = 0.3 * u

    # Robot is steering slowly
    # therefore we had to make steer faster
    # max speed = 0.3
    omega = (math.copysign(abs(omega)**(1.0/6), omega))
    angular = 0.3 * omega

---------CHALLENGE 4----------

    # Challenge 4 
    
    # Based on presentation 9, we know
    # that in a motor schema u = upath + c*u_obs
    # and omega = omega_path + c*omega_obs
    c1 = 10**(-5)
    c2 = 10**(-5)
    self.linear_velocity  = l_goal + l_laser * c1
    if self.linear_velocity == 0: # just in case it stops
        self.linear_velocity = -0.05

    self.angular_velocity = a_goal + a_laser * c2

    # Make sure speeds are on the range [-3,3]
    self.linear_velocity = min(0.3, max(-0.3, self.linear_velocity))
    self.angular_velocity = min(0.3, max(-0.3, self.angular_velocity))


---------- CHALLENGE 5 ---------
    # Challenge 5 
    
    # Instead of checking the distance of the next target,
    # check the distance of the remaining targets, therefore you may reach to a next subject
    # bypassing current.
    
    for i in range(self.next_subtarget, len(self.subtargets)):
        # Find the distance between the robot pose and the next subtarget
        dist = math.hypot( rx - self.subtargets[i][0], ry - self.subtargets[i][1])
    
        # check distance with the i_th target
        if i != (len(self.subtargets)-1):
            if dist < 10:        #if distance found to be small from a terget set as next the target i + 1
                self.next_subtarget = i + 1
                self.counter_to_next_sub = self.count_limit
        else:
            if dist < 5:        #if distance found to be small from a terget set as next the target i + 1
                self.next_subtarget = i + 1
                self.counter_to_next_sub = self.count_limit
    
        # Check if the final subtarget has been approached
        if self.next_subtarget == len(self.subtargets):
            self.target_exists = False


------------CHALLENGE 6-------------

target_selector: 'smart'        # add smart target selector Challenge 6


    # Challenge 6. select Smart Target Function
    # this function follows the methodology presented
    # on lecture 9.
    def selectSmartTarget(self, coverage, brush, robot_pose, resolution, origin, nodes):
        tinit = time.time()

        # Get the robot pose in pixels
        [rx, ry] = [int(round(robot_pose['x_px'] - origin['x'] / resolution)), int(round(robot_pose['y_px'] - origin['y'] / resolution))]

        # Initialize weights matrix
        weights = []

        # Do procedure described in presentation 9
        # for each node.
        for i, node in enumerate(nodes):

            # Calculate the path
            path = np.flipud(self.path_planning.createPath([rx, ry], node, resolution))

            # Check if it found a path
            if path.shape[0] > 2:
                # Vectors of the path
                vectors = path[1:, :] - path[:-1, :]

                # Calculate paths weighted distance
                vectorsMean = vectors.mean(axis=0)
                vectorsVar = vectors.var(axis=0)
                dists = np.sqrt(np.einsum('ij,ij->i', vectors, vectors))
                weightCoeff = 1 / (1 - np.exp(-np.sum((vectors - vectorsMean)**2 / (2 * vectorsVar), axis=1)) + 1e-4)
                weightDists = np.sum(weightCoeff + dists)

                # Topological weight
                weightTopo = brush[node[0], node[1]]

                # Cosine of the angles
                c = np.sum(vectors[1:, :] * vectors[:-1, :], axis=1) / np.linalg.norm(vectors[1:, :], axis=1) / np.linalg.norm(vectors[:-1, :], axis=1)

                # Sum of all angles
                weightTurn = np.sum(abs(np.arccos(np.clip(c, -1, 1))))

                # Calculate the coverage weight
                pathIndex = np.rint(path).astype(int)
                weightCove = 1 - np.sum(coverage[pathIndex[:, 0], pathIndex[:, 1]]) / (path.shape[0] * 255)

                weights.append([i, weightDists, weightTopo, weightTurn, weightCove])


        if len(weights) > 0:
            weight = np.array(weights)

            # Normalize the weights at [0,1]
            weight[:,1:] = 1 - ((weight[:,1:] - np.min(weight[:,1:], axis=0)) / (np.max(weight[:,1:], axis=0) - np.min(weight[:,1:], axis=0)))

            # Calculatete the final weights
            finalWeights = 8 * weight[:, 2] + 4 * weight[:, 1] + 2 * weight[:, 4] + weight[:, 3]

            # Find the best path
            index = int(weight[max(xrange(len(finalWeights)), key=finalWeights.__getitem__)][0])

            target = nodes[index]

            Print.art_print("Smart target selection time: " + str(time.time() - tinit), Print.ORANGE)

            return target
        else:
            Print.art_print("Smart target selection failed!!! Time: " + str(time.time() - tinit), Print.ORANGE)

            return None


    # Challenge 6. Smart point selection demands autonomous_expl.yaml->target_selector: 'smart'
    # Smart point selection
    if self.method == 'smart' and force_random == False:
        nextTarget = self.selectSmartTarget(coverage, brush, robot_pose, resolution, origin, nodes)

        # Check if selectSmartTarget found a target
        if nextTarget is not None:
            # Check if the next target is the same as the previous
            dist = math.hypot( nextTarget[0] - self.previous_target[0], nextTarget[1] - self.previous_target[1])
            if dist > 5:
                target = nextTarget
            else:
                target = self.selectRandomTarget(ogm, coverage, brush, ogm_limits)
        else:
            # No target found. Choose a random
            target = self.selectRandomTarget(ogm, coverage, brush, ogm_limits)


    self.previous_target = target
    return target


-------------EXTRA CHALLENGE 1---------------

    ###################################################
    # Extra Challenge 1 
    # Smooth path
    if len(self.path) > 3:
        x = np.array(self.path)
        y = np.copy(x)
        a = 0.5
        b = 0.1
    
        epsilon = np.sum(np.abs(a * (x[1:-1, :] - y[1:-1, :]) + b * (y[2:, :] - 2*y[1:-1, :] + y[:-2, :])))
    
        while epsilon > 1e-3:
            y[1:-1, :] += a * (x[1:-1, :] - y[1:-1, :]) + b * (y[2:, :] - 2*y[1:-1, :] + y[:-2, :])
    
            epsilon = np.sum(np.abs(a * (x[1:-1, :] - y[1:-1, :]) + b * (y[2:, :] - 2*y[1:-1, :] + y[:-2, :])))
    
        # Copy the smoother path
        self.path = y.tolist()
    ####################################################

